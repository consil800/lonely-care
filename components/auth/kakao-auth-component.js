/**
 * Ïπ¥Ïπ¥Ïò§ Ïù∏Ï¶ù Ïª¥Ìè¨ÎÑåÌä∏ v2.0
 * ÏôÑÏ†ÑÌûà ÎèÖÎ¶ΩÏ†ÅÏù∏ Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Î™®Îìà - Îã§Î•∏ ÏãúÏä§ÌÖúÍ≥º Í≤©Î¶¨
 */
class KakaoAuthComponent {
    constructor(config = {}) {
        this.config = {
            appKey: config.appKey || 'dd74fd58abbb75eb58df11ecc92d6727',
            redirectUri: config.redirectUri || this.getDefaultRedirectUri(),
            scope: config.scope || 'profile_nickname,profile_image,account_email',
            ...config
        };
        
        this.isInitialized = false;
        this.user = null;
        this.listeners = new Map();
        this.environment = this.detectEnvironment();
        
        console.log(`üîß Ïπ¥Ïπ¥Ïò§ Ïù∏Ï¶ù Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî (ÌôòÍ≤Ω: ${this.environment})`);
        this.init();
    }

    /**
     * ÌôòÍ≤Ω Í∞êÏßÄ (Ïõπ, WebView, Native)
     */
    detectEnvironment() {
        if (window.AndroidBridge && typeof window.AndroidBridge.kakaoLogin === 'function') {
            return 'android_native';
        }
        if (window.location.protocol === 'file:') {
            return 'webview';
        }
        return 'web';
    }

    /**
     * Í∏∞Î≥∏ Î¶¨Îã§Ïù¥Î†âÌä∏ URI ÏÉùÏÑ± - Ìè¨Ìä∏Î≥Ñ ÎåÄÏùë
     */
    getDefaultRedirectUri() {
        const port = window.location.port;
        const hostname = window.location.hostname;
        
        // Ïπ¥Ïπ¥Ïò§Ïóê Îì±Î°ùÎêú URIÎì§Í≥º Îß§Ïπ≠
        const registeredUris = {
            '5500': `http://127.0.0.1:5500/lonely-care/oauth.html`,
            '5650': `http://127.0.0.1:5650/lonely-care/oauth.html`,
            '8080': `http://127.0.0.1:8080/oauth.html`,
            '8000': `http://127.0.0.1:8000/oauth.html`
        };
        
        if (registeredUris[port]) {
            console.log(`‚úÖ Îì±Î°ùÎêú Ìè¨Ìä∏ ${port} ÏÇ¨Ïö©`);
            return registeredUris[port];
        }
        
        // Í∏∞Î≥∏Í∞í
        console.warn(`‚ö†Ô∏è ÎØ∏Îì±Î°ù Ìè¨Ìä∏ ${port}, Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©`);
        return 'http://127.0.0.1:5500/lonely-care/oauth.html';
    }

    /**
     * Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Í¥ÄÎ¶¨
     */
    on(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event).push(callback);
    }

    emit(event, data) {
        const callbacks = this.listeners.get(event);
        if (callbacks) {
            callbacks.forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Ïù¥Î≤§Ìä∏ ${event} Ìï∏Îì§Îü¨ Ïò§Î•ò:`, error);
                }
            });
        }
    }

    /**
     * Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî
     */
    async init() {
        try {
            console.log('üîÑ Ïπ¥Ïπ¥Ïò§ SDK Ï¥àÍ∏∞Ìôî ÏãúÏûë...');
            
            if (this.environment === 'android_native') {
                // Android ÎÑ§Ïù¥Ìã∞Î∏åÎäî Î≥ÑÎèÑ Ï¥àÍ∏∞Ìôî Î∂àÌïÑÏöî
                this.isInitialized = true;
                console.log('‚úÖ Android ÎÑ§Ïù¥Ìã∞Î∏å ÌôòÍ≤Ω Ï§ÄÎπÑ ÏôÑÎ£å');
                this.emit('ready');
                return;
            }
            
            if (this.environment === 'webview') {
                // WebViewÏóêÏÑúÎäî ÎÑ§Ïù¥Ìã∞Î∏å Î°úÍ∑∏Ïù∏Îßå ÏßÄÏõê
                this.isInitialized = true;
                console.log('‚úÖ WebView ÌôòÍ≤Ω Ï§ÄÎπÑ ÏôÑÎ£å');
                this.emit('ready');
                return;
            }
            
            // Ïõπ ÌôòÍ≤ΩÏóêÏÑúÎßå Kakao SDK Ï¥àÍ∏∞Ìôî
            await this.initKakaoSDK();
            this.isInitialized = true;
            console.log('‚úÖ Ïõπ ÌôòÍ≤Ω Kakao SDK Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
            this.emit('ready');
            
        } catch (error) {
            console.error('‚ùå Ïπ¥Ïπ¥Ïò§ Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
            this.emit('error', { type: 'init', error });
        }
    }

    /**
     * Kakao SDK Ï¥àÍ∏∞Ìôî (Ïõπ ÌôòÍ≤ΩÎßå)
     */
    async initKakaoSDK() {
        return new Promise((resolve, reject) => {
            const checkKakao = () => {
                if (window.Kakao) {
                    try {
                        if (window.Kakao.isInitialized()) {
                            window.Kakao.cleanup();
                        }
                        window.Kakao.init(this.config.appKey);
                        resolve();
                    } catch (error) {
                        reject(error);
                    }
                } else {
                    setTimeout(checkKakao, 100);
                }
            };
            checkKakao();
            
            // 10Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
            setTimeout(() => reject(new Error('Kakao SDK Î°úÎìú ÌÉÄÏûÑÏïÑÏõÉ')), 10000);
        });
    }

    /**
     * Î°úÍ∑∏Ïù∏ Ïã§Ìñâ - ÌôòÍ≤ΩÎ≥Ñ ÏûêÎèô Î∂ÑÍ∏∞
     */
    async login() {
        if (!this.isInitialized) {
            throw new Error('Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }

        try {
            this.emit('login-start');
            
            switch (this.environment) {
                case 'android_native':
                    return await this.loginWithAndroidNative();
                case 'webview':
                    throw new Error('WebViewÏóêÏÑúÎäî ÎÑ§Ïù¥Ìã∞Î∏å Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
                case 'web':
                default:
                    return await this.loginWithWebOAuth();
            }
        } catch (error) {
            console.error('Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
            this.emit('login-error', error);
            throw error;
        }
    }

    /**
     * Android ÎÑ§Ïù¥Ìã∞Î∏å Î°úÍ∑∏Ïù∏
     */
    async loginWithAndroidNative() {
        return new Promise((resolve, reject) => {
            console.log('üì± Android ÎÑ§Ïù¥Ìã∞Î∏å Î°úÍ∑∏Ïù∏ ÏãúÏûë');
            
            // Ï†ÑÏó≠ ÏΩúÎ∞± Ìï®Ïàò Îì±Î°ù
            window.kakaoLoginSuccess = (userDataString) => {
                try {
                    const userData = JSON.parse(userDataString);
                    this.user = {
                        id: userData.id,
                        email: userData.email || '',
                        nickname: userData.nickname || '',
                        profile_image: userData.profile_image || '',
                        source: 'android_native'
                    };
                    
                    console.log('‚úÖ Android ÎÑ§Ïù¥Ìã∞Î∏å Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', this.user);
                    this.emit('login-success', this.user);
                    resolve(this.user);
                } catch (error) {
                    console.error('ÎÑ§Ïù¥Ìã∞Î∏å Î°úÍ∑∏Ïù∏ Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ïò§Î•ò:', error);
                    reject(new Error('Î°úÍ∑∏Ïù∏ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ïã§Ìå®'));
                } finally {
                    // ÏΩúÎ∞± Ï†ïÎ¶¨
                    delete window.kakaoLoginSuccess;
                    delete window.kakaoLoginError;
                }
            };
            
            window.kakaoLoginError = (error) => {
                console.error('‚ùå Android ÎÑ§Ïù¥Ìã∞Î∏å Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
                reject(new Error(error || 'ÎÑ§Ïù¥Ìã∞Î∏å Î°úÍ∑∏Ïù∏ Ïã§Ìå®'));
                
                // ÏΩúÎ∞± Ï†ïÎ¶¨
                delete window.kakaoLoginSuccess;
                delete window.kakaoLoginError;
            };
            
            // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
            setTimeout(() => {
                if (window.kakaoLoginSuccess) {
                    delete window.kakaoLoginSuccess;
                    delete window.kakaoLoginError;
                    reject(new Error('Î°úÍ∑∏Ïù∏ ÏãúÍ∞Ñ Ï¥àÍ≥º'));
                }
            }, 30000);
            
            // Android Bridge Ìò∏Ï∂ú
            window.AndroidBridge.kakaoLogin();
        });
    }

    /**
     * Ïõπ OAuth Î°úÍ∑∏Ïù∏
     */
    async loginWithWebOAuth() {
        return new Promise((resolve, reject) => {
            console.log('üåê Ïõπ OAuth Î°úÍ∑∏Ïù∏ ÏãúÏûë');
            
            const authUrl = `https://kauth.kakao.com/oauth/authorize?` +
                `client_id=${this.config.appKey}&` +
                `redirect_uri=${encodeURIComponent(this.config.redirectUri)}&` +
                `response_type=code&` +
                `scope=${this.config.scope}`;
                
            console.log('üéØ OAuth URL:', authUrl);
            console.log('üéØ Redirect URI:', this.config.redirectUri);
            
            const popup = window.open(authUrl, 'kakao_login', 'width=500,height=600');
            
            if (!popup) {
                reject(new Error('ÌåùÏóÖÏù¥ Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§. ÌåùÏóÖ Ï∞®Îã®ÏùÑ Ìï¥Ï†úÌï¥Ï£ºÏÑ∏Ïöî.'));
                return;
            }
            
            // ÌåùÏóÖ Î™®ÎãàÌÑ∞ÎßÅ
            const checkClosed = setInterval(() => {
                if (popup.closed) {
                    clearInterval(checkClosed);
                    
                    // localStorageÏóêÏÑú Í≤∞Í≥º ÌôïÏù∏
                    const result = localStorage.getItem('kakao_auth_result');
                    if (result) {
                        try {
                            const authResult = JSON.parse(result);
                            localStorage.removeItem('kakao_auth_result');
                            
                            if (authResult.success) {
                                this.user = {
                                    id: authResult.id,
                                    email: authResult.email || '',
                                    nickname: authResult.nickname || '',
                                    profile_image: authResult.profile_image || '',
                                    source: 'web_oauth'
                                };
                                
                                console.log('‚úÖ Ïõπ OAuth Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', this.user);
                                this.emit('login-success', this.user);
                                resolve(this.user);
                            } else {
                                reject(new Error(authResult.error || 'Î°úÍ∑∏Ïù∏ Ïã§Ìå®'));
                            }
                        } catch (error) {
                            reject(new Error('Î°úÍ∑∏Ïù∏ Í≤∞Í≥º Ï≤òÎ¶¨ Ïã§Ìå®'));
                        }
                    } else {
                        reject(new Error('Î°úÍ∑∏Ïù∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§'));
                    }
                }
            }, 1000);
            
            // 3Î∂Ñ ÌÉÄÏûÑÏïÑÏõÉ
            setTimeout(() => {
                if (!popup.closed) {
                    popup.close();
                    clearInterval(checkClosed);
                    reject(new Error('Î°úÍ∑∏Ïù∏ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§'));
                }
            }, 180000);
        });
    }

    /**
     * Î°úÍ∑∏ÏïÑÏõÉ
     */
    async logout() {
        try {
            this.emit('logout-start');
            
            // Ïõπ ÌôòÍ≤ΩÏóêÏÑú SDK Î°úÍ∑∏ÏïÑÏõÉ
            if (this.environment === 'web' && window.Kakao?.Auth) {
                if (window.Kakao.Auth.getAccessToken()) {
                    await new Promise((resolve) => {
                        window.Kakao.Auth.logout(resolve);
                    });
                }
            }
            
            this.user = null;
            console.log('‚úÖ Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å');
            this.emit('logout-success');
            
        } catch (error) {
            console.error('‚ùå Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:', error);
            this.emit('logout-error', error);
            throw error;
        }
    }

    /**
     * ÌòÑÏû¨ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
     */
    isLoggedIn() {
        return this.user !== null;
    }

    /**
     * ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î∞òÌôò
     */
    getCurrentUser() {
        return this.user;
    }

    /**
     * Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Ï≤¥ÌÅ¨
     */
    async checkLoginStatus() {
        try {
            if (this.environment === 'web' && window.Kakao?.Auth) {
                const token = window.Kakao.Auth.getAccessToken();
                if (token) {
                    const userInfo = await this.getWebUserInfo();
                    this.user = userInfo;
                    return this.user;
                }
            }
            
            return null;
        } catch (error) {
            console.error('Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ïã§Ìå®:', error);
            return null;
        }
    }

    /**
     * ÏõπÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
     */
    async getWebUserInfo() {
        return new Promise((resolve, reject) => {
            window.Kakao.API.request({
                url: '/v2/user/me',
                success: (response) => {
                    const userInfo = {
                        id: response.id,
                        email: response.kakao_account?.email || '',
                        nickname: response.properties?.nickname || '',
                        profile_image: response.properties?.profile_image || '',
                        source: 'web'
                    };
                    resolve(userInfo);
                },
                fail: (error) => {
                    reject(new Error('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®'));
                }
            });
        });
    }

    /**
     * Ïª¥Ìè¨ÎÑåÌä∏ Ï†ïÎ¶¨
     */
    destroy() {
        this.listeners.clear();
        this.user = null;
        this.isInitialized = false;
        
        // Ï†ÑÏó≠ ÏΩúÎ∞± Ï†ïÎ¶¨
        if (window.kakaoLoginSuccess) delete window.kakaoLoginSuccess;
        if (window.kakaoLoginError) delete window.kakaoLoginError;
        
        console.log('üóëÔ∏è Ïπ¥Ïπ¥Ïò§ Ïù∏Ï¶ù Ïª¥Ìè¨ÎÑåÌä∏ Ï†ïÎ¶¨ ÏôÑÎ£å');
    }
}

// Î™®Îìà ÎÇ¥Î≥¥ÎÇ¥Í∏∞
if (typeof module !== 'undefined' && module.exports) {
    module.exports = KakaoAuthComponent;
} else {
    window.KakaoAuthComponent = KakaoAuthComponent;
}